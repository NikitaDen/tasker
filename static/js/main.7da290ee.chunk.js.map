{"version":3,"sources":["assets/images/done.svg","assets/images/pin.svg","assets/images/edit.svg","assets/images/add.svg","assets/images/delete.svg","context.jsx","components/TodoItem/TodoSubItem/TodoSubItem.jsx","components/TodoItem/TodoItem.jsx","reducer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","TodoSubItem","props","useState","subTitle","setSubTitle","disabled","setDisabled","className","item","isDone","src","done","alt","type","onChange","dispatch","id","subId","style","textDecoration","title","value","event","target","onKeyPress","key","payload","onBlur","autoFocus","placeholder","edit","onClick","pin","TodoItem","useContext","checked","add","Date","now","remove","subTodo","map","reverse","state","action","progress","subItem","filter","App","todos","JSON","parse","localStorage","getItem","useReducer","reducer","todoTitle","setTodoTitle","useEffect","setItem","stringify","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7da290ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/done.6fc8520a.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.21f97986.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.718de568.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.b0564449.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.ee635b5a.svg\";","import * as React from \"react\";\r\n\r\nexport const Context = React.createContext();","import React, {useState} from \"react\";\r\nimport pin from './../../../assets/images/pin.svg';\r\nimport edit from './../../../assets/images/edit.svg';\r\nimport done from './../../../assets/images/done.svg';\r\n\r\nconst TodoSubItem = (props) => {\r\n    const [subTitle, setSubTitle] = useState('');\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    const editSubTodo = (event) => {\r\n        if (event.key === 'Enter') {\r\n            props.dispatch({\r\n                type: 'EDIT_SUB_TODO',\r\n                subId: props.item.subId,\r\n                id: props.id,\r\n                payload: {title: subTitle}\r\n            });\r\n            setDisabled(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='todo-subitem'>\r\n            <div className='todo-subitem__check'>\r\n                {props.item.isDone ? <img src={done} className='isDone' alt=\"done\"/> : <span className={'checkSpan'}/>}\r\n                <input className='isDoneCheckbox' type=\"checkbox\" onChange={() => props.dispatch({\r\n                    type: 'TOGGLE_SUB_TODO',\r\n                    id: props.id,\r\n                    subId: props.item.subId\r\n                })}/>\r\n            </div>\r\n\r\n\r\n            {disabled ? <span style={props.item.isDone ? {textDecoration: 'line-through'} : {}}>{props.item.title || 'Press edit'}</span>\r\n                : <input type=\"text\"\r\n                         value={subTitle}\r\n                         onChange={event => setSubTitle(event.target.value)}\r\n                         onKeyPress={editSubTodo}\r\n                         onBlur={() => {\r\n                             setDisabled(true)\r\n                         }}\r\n                         autoFocus={true}\r\n                         placeholder={'Введите подцель'}/>\r\n            }\r\n            <div className='buttons'>\r\n                <img src={edit} alt='edit' className='button' onClick={() => {\r\n                    setDisabled(false)\r\n                }}/>\r\n                <img src={pin} alt='remove' className='button' onClick={() => props.dispatch({\r\n                    type: 'DELETE_SUB_TODO',\r\n                    id: props.id,\r\n                    subId: props.item.subId\r\n                })}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoSubItem;","import React, {useContext} from \"react\";\r\nimport {Context} from \"../../context\";\r\nimport TodoSubItem from \"./TodoSubItem/TodoSubItem\";\r\nimport add from \"../../assets/images/add.svg\";\r\nimport remove from \"../../assets/images/delete.svg\";\r\nimport done from \"../../assets/images/done.svg\";\r\n\r\nconst TodoItem = (props) => {\r\n    const {dispatch} = useContext(Context);\r\n    return (\r\n        <>\r\n            <div className={props.isDone ? 'todo-item todo-item--done' : 'todo-item'}>\r\n                <div>\r\n                    {props.isDone ? <img src={done} className='isDone isDone--todo' alt=\"done\"/> : <span className={'checkSpan checkSpan--todo'}/>}\r\n                    <input type=\"checkbox\"\r\n                           className={'isDoneCheckbox isDoneCheckbox--todo'}\r\n                           checked={props.isDone}\r\n                           onChange={() => dispatch({\r\n                               type: 'TOGGLE_TODO',\r\n                               id: props.id\r\n                           })}/>\r\n                </div>\r\n                <span>{props.title}</span>\r\n                <div className='buttons'>\r\n                    <img src={add} className='button' onClick={() => dispatch({\r\n                        type: 'ADD_SUB_TODO',\r\n                        id: props.id,\r\n                        payload: {title: '', subId: Date.now()}\r\n                    })} alt='add'/>\r\n\r\n                    <img src={remove} alt={'delete'} className='button' onClick={() => dispatch({\r\n                        type: 'DELETE',\r\n                        id: props.id\r\n                    })}/>\r\n                </div>\r\n            </div>\r\n            {props.subTodo.map(item => <TodoSubItem key={item.subId} {...props} dispatch={dispatch} item={item}/>).reverse()}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoItem;","export default function (state, action) {\r\n    switch (action.type) {\r\n        case 'ADD':\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: Date.now(),\r\n                    title: action.payload,\r\n                    isDone: false,\r\n                    subTodo: [],\r\n                    progress: 0\r\n                }\r\n            ];\r\n        case 'ADD_SUB_TODO':\r\n            return state.map(item => {\r\n                if (item.id === action.id) {\r\n                    return {\r\n                        ...item,\r\n                        subTodo: [\r\n                            ...item.subTodo,\r\n                            {\r\n                                ...action.payload,\r\n                                subId: Date.now(),\r\n                                isDone: false\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n                return item;\r\n            });\r\n        case 'EDIT_SUB_TODO':\r\n            return state.map(item => {\r\n                if (item.id === action.id) {\r\n                    return {\r\n                        ...item,\r\n                        subTodo:\r\n                            item.subTodo.map(subItem => {\r\n                                if (subItem.subId === action.subId) {\r\n                                    return {\r\n                                        ...subItem,\r\n                                        ...action.payload\r\n                                    }\r\n                                }\r\n                                return subItem;\r\n                            })\r\n                    };\r\n                }\r\n                return item;\r\n            });\r\n        case 'TOGGLE_TODO':\r\n            return state.map(item => {\r\n                if (item.id === action.id) {\r\n                    return {\r\n                        ...item,\r\n                        isDone: !item.isDone\r\n                    }\r\n                }\r\n                return item;\r\n            });\r\n        case 'TOGGLE_SUB_TODO':\r\n            return state.map(item => {\r\n                if (item.id === action.id) {\r\n                    return {\r\n                        ...item,\r\n                        subTodo:\r\n                            item.subTodo.map(subItem => {\r\n                                if (subItem.subId === action.subId) {\r\n                                    return {\r\n                                        ...subItem,\r\n                                        isDone: !subItem.isDone\r\n                                    }\r\n                                }\r\n                                return subItem;\r\n                            })\r\n                    };\r\n                }\r\n                return item;\r\n            });\r\n        case 'DELETE':\r\n            return state.filter(item => item.id !== action.id);\r\n        case 'DELETE_SUB_TODO':\r\n            return state.map(item => {\r\n                if (item.id === action.id) {\r\n                    return {\r\n                        ...item,\r\n                        subTodo: item.subTodo.filter(subItem => subItem.subId !== action.subId)\r\n                    };\r\n                }\r\n                return item;\r\n            });\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useEffect, useReducer, useState} from 'react';\nimport './assets/styles/styles.scss';\nimport TodoItem from \"./components/TodoItem/TodoItem\";\nimport {Context} from \"./context\";\nimport reducer from \"./reducer\";\n\nconst App = () => {\n    const todos = JSON.parse(localStorage.getItem('todos')) || [];\n    const [state, dispatch] = useReducer(reducer, todos);\n    const [todoTitle, setTodoTitle] = useState('');\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(state))\n    }, [state]);\n\n    const addTodo = (event) => {\n        if (event.key === 'Enter') {\n            dispatch({\n                type: 'ADD',\n                payload: todoTitle\n            });\n            setTodoTitle('');\n        }\n    };\n    return (\n        <Context.Provider value={{dispatch}}>\n            <div className=\"App\">\n                <h3>Tasker</h3>\n                <input className='main-input'\n                       type=\"text\"\n                       placeholder='Введите вашу цель'\n                       value={todoTitle}\n                       onChange={event => setTodoTitle(event.target.value)}\n                       autoFocus={true}\n                       onKeyPress={addTodo}\n                />\n                {state.map(item => <TodoItem key={item.id} subTodo={item.subTodo} isDone={item.isDone} id={item.id}\n                                             title={item.title}/>).reverse()}\n            </div>\n        </Context.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}