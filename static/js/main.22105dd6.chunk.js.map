{"version":3,"sources":["assets/images/done.svg","assets/images/pin.svg","assets/images/edit.svg","assets/images/add.svg","assets/images/delete.svg","context.jsx","components/TodoItem/TodoSubItem/TodoSubItem.jsx","components/TodoItem/TodoItem.jsx","reducer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Context","React","TodoSubItem","props","useState","subTitle","setSubTitle","disabled","setDisabled","useEffect","toggleDone","item","isDone","className","src","done","alt","type","onChange","dispatch","toggleSubTodoAC","id","subId","style","textDecoration","title","value","event","target","onKeyPress","key","editSubTodoAC","onBlur","autoFocus","placeholder","pin","onClick","deleteSubTodoAC","edit","TodoItem","useContext","addSubTodoAC","deleteTodoAC","toggleTodoAC","subTodo","length","filter","checked","date","add","Date","now","remove","map","reverse","state","action","tasks","toLocaleDateString","payload","progress","subItem","filterAC","App","todos","JSON","parse","localStorage","getItem","useReducer","reducer","todoTitle","setTodoTitle","setItem","stringify","Provider","addTodoAC","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22105dd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/done.6fc8520a.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.fd6c39aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.c22620d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.b1160944.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.a11d67e2.svg\";","import * as React from \"react\";\r\n\r\nexport const Context = React.createContext();","import React, {useEffect, useState} from \"react\";\r\nimport pin from './../../../assets/images/pin.svg';\r\nimport edit from './../../../assets/images/edit.svg';\r\nimport done from './../../../assets/images/done.svg';\r\n\r\nconst TodoSubItem = (props) => {\r\n    const [subTitle, setSubTitle] = useState('');\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    const editSubTodo = (event) => {\r\n        if (event.key === 'Enter') {\r\n            props.dispatch(props.editSubTodoAC(props.item.subId, props.id, {title: subTitle}));\r\n            setDisabled(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => props.toggleDone(true), [props.item.isDone]);\r\n\r\n    return (\r\n        <div className='todo-subitem'>\r\n            <div className='todo-subitem__check'>\r\n                {props.item.isDone\r\n                    ? <img src={done} className='isDone' alt=\"done\"/>\r\n                    : <span className={'checkSpan'}/>}\r\n                <input className='isDoneCheckbox' type=\"checkbox\"\r\n                       onChange={() => {props.dispatch(props.toggleSubTodoAC(props.id, props.item.subId))}}/>\r\n            </div>\r\n\r\n            {disabled\r\n                ? <div className={'todo-subitem__text'}\r\n                    style={props.item.isDone ? {textDecoration: 'line-through'} : {}}>{props.item.title || 'Press edit'}</div>\r\n                : <input type=\"text\"\r\n                         value={subTitle}\r\n                         onChange={event => setSubTitle(event.target.value)}\r\n                         onKeyPress={editSubTodo}\r\n                         onBlur={() => {\r\n                             setDisabled(true)\r\n                         }}\r\n                         autoFocus={true}\r\n                         placeholder={'Input subtask...'}/>\r\n            }\r\n\r\n            <div className='buttons'>\r\n                <img src={pin} alt='remove' className='button'\r\n                     onClick={() => props.dispatch(props.deleteSubTodoAC(props.id, props.item.subId))}/>\r\n                <img src={edit} alt='edit' className='button' onClick={() => {\r\n                    setDisabled(false)\r\n                }}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoSubItem;","import React, {useContext} from \"react\";\r\nimport {Context} from \"../../context\";\r\nimport TodoSubItem from \"./TodoSubItem/TodoSubItem\";\r\nimport add from \"../../assets/images/add.svg\";\r\nimport remove from \"../../assets/images/delete.svg\";\r\nimport done from \"../../assets/images/done.svg\";\r\n\r\nconst TodoItem = (props) => {\r\n    const {\r\n        dispatch, addSubTodoAC, deleteTodoAC,\r\n        toggleTodoAC, editSubTodoAC, toggleSubTodoAC, deleteSubTodoAC\r\n    } = useContext(Context);\r\n\r\n    const toggleDone = (isDone) => {\r\n        if (props.subTodo.length === props.subTodo.filter(item => item.isDone === true).length) {\r\n            dispatch(toggleTodoAC(props.id, isDone));\r\n        } else {\r\n            dispatch(toggleTodoAC(props.id, !isDone));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={props.isDone ? 'todo-item todo-item--done' : 'todo-item'}>\r\n                <div className='loader'/>\r\n\r\n                <div className='todo-item__check'>\r\n                    {props.isDone\r\n                        ? <img src={done} className='isDone isDone--todo' alt=\"done\"/>\r\n                        : <span className={'checkSpan checkSpan--todo'}/>\r\n                    }\r\n                    <input type=\"checkbox\"\r\n                           className={'isDoneCheckbox isDoneCheckbox--todo'}\r\n                           checked={props.isDone}\r\n                           onChange={() => dispatch(toggleTodoAC(props.id, !props.isDone))}/>\r\n                </div>\r\n\r\n                <span>{props.title}</span>\r\n                <div className='date'>{props.date}</div>\r\n\r\n                <div className='buttons'>\r\n                    <img src={add}\r\n                         className='button'\r\n                         onClick={() => dispatch(addSubTodoAC(props.id, {title: '', subId: Date.now()}))}\r\n                         alt='add'/>\r\n\r\n                    <img src={remove} alt={'delete'} className='button'\r\n                         onClick={() => dispatch(deleteTodoAC(props.id))}/>\r\n                </div>\r\n            </div>\r\n            {props.subTodo.map(item => <TodoSubItem key={item.subId} {...props} toggleDone={toggleDone}\r\n                                                    dispatch={dispatch}\r\n                                                    toggleSubTodoAC={toggleSubTodoAC} deleteSubTodoAC={deleteSubTodoAC}\r\n                                                    editSubTodoAC={editSubTodoAC}\r\n                                                    item={item}/>).reverse()}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoItem;","const ADD = 'ADD';\r\nconst ADD_SUB_TODO = 'ADD_SUB_TODO';\r\nconst DELETE = 'DELETE';\r\nconst TOGGLE_TODO = 'TOGGLE_TODO';\r\nconst EDIT_SUB_TODO = 'EDIT_SUB_TODO';\r\nconst TOGGLE_SUB_TODO = 'TOGGLE_SUB_TODO';\r\nconst DELETE_SUB_TODO = 'DELETE_SUB_TODO';\r\nconst FILTER = 'FILTER';\r\n\r\nexport default function (state, action) {\r\n    switch (action.type) {\r\n        case FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.filter,\r\n            };\r\n        case ADD:\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks,\r\n                    {\r\n                        id: Date.now(),\r\n                        date: `${new Date().toLocaleDateString()}`,\r\n                        title: action.payload,\r\n                        isDone: false,\r\n                        subTodo: [],\r\n                        progress: 0\r\n                    }\r\n                ]\r\n            };\r\n        case ADD_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo: [\r\n                                ...item.subTodo,\r\n                                {\r\n                                    ...action.payload,\r\n                                    subId: Date.now(),\r\n                                    isDone: false\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case TOGGLE_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            isDone: action.isDone\r\n                        }\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case TOGGLE_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo:\r\n                                item.subTodo.map(subItem => {\r\n                                    if (subItem.subId === action.subId) {\r\n                                        return {\r\n                                            ...subItem,\r\n                                            isDone: !subItem.isDone\r\n                                        }\r\n                                    }\r\n                                    return subItem;\r\n                                })\r\n                        };\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case EDIT_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo:\r\n                                item.subTodo.map(subItem => {\r\n                                    if (subItem.subId === action.subId) {\r\n                                        return {\r\n                                            ...subItem,\r\n                                            ...action.payload\r\n                                        }\r\n                                    }\r\n                                    return subItem;\r\n                                })\r\n                        };\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case DELETE:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(item => item.id !== action.id)\r\n            };\r\n        case DELETE_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo: item.subTodo.filter(subItem => subItem.subId !== action.subId)\r\n                        };\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const filterAC = (filter) => ({type: FILTER, filter});\r\n\r\nexport const addTodoAC = (todoTitle) => ({type: ADD, payload: todoTitle});\r\nexport const addSubTodoAC = (id, payload) => ({type: ADD_SUB_TODO, id, payload});\r\n\r\nexport const toggleTodoAC = (id, isDone) => ({type: TOGGLE_TODO, id, isDone});\r\nexport const toggleSubTodoAC = (id, subId) => ({type: TOGGLE_SUB_TODO, subId, id});\r\n\r\nexport const editSubTodoAC = (subId, id, payload) => ({type: EDIT_SUB_TODO, subId, id, payload});\r\n\r\nexport const deleteTodoAC = (id) => ({type: DELETE, id});\r\nexport const deleteSubTodoAC = (id, subId) => ({type: DELETE_SUB_TODO, subId, id});","import React, {useEffect, useReducer, useState} from 'react';\nimport './assets/styles/styles.scss';\nimport TodoItem from \"./components/TodoItem/TodoItem\";\nimport {Context} from \"./context\";\nimport reducer, {\n    addSubTodoAC,\n    addTodoAC,\n    deleteSubTodoAC,\n    deleteTodoAC,\n    editSubTodoAC, filterAC,\n    toggleSubTodoAC,\n    toggleTodoAC\n} from \"./reducer\";\n\n\nconst App = () => {\n    const todos = JSON.parse(localStorage.getItem('todos')) || {filter: 'All', tasks: []};\n    const [state, dispatch] = useReducer(reducer, todos);\n    const [todoTitle, setTodoTitle] = useState('');\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(state))\n    }, [state]);\n\n    const addTodo = (event) => {\n        if (event.key === 'Enter') {\n            dispatch(addTodoAC(todoTitle));\n            setTodoTitle('');\n        }\n    };\n\n    return (\n        <Context.Provider value={{\n            dispatch,\n            filterAC,\n            addSubTodoAC,\n            deleteTodoAC,\n            toggleTodoAC,\n            editSubTodoAC,\n            toggleSubTodoAC,\n            deleteSubTodoAC\n        }}>\n            <div className=\"App\">\n                <h3>Tasker</h3>\n                <input className='main-input'\n                       type=\"text\"\n                       placeholder='Input your task...'\n                       value={todoTitle}\n                       onChange={event => setTodoTitle(event.target.value)}\n                       autoFocus={true}\n                       onKeyPress={addTodo}\n                />\n                <div>\n                    <button className={`button button--filter ${state.filter === 'All' && 'active'}`}\n                            onClick={() => dispatch(filterAC('All'))}>All\n                    </button>\n                    <button className={`button button--filter ${state.filter === 'Completed' && 'active'}`}\n                            onClick={() => dispatch(filterAC('Completed'))}>Completed\n                    </button>\n                    <button className={`button button--filter ${state.filter === 'Active' && 'active'}`}\n                            onClick={() => dispatch(filterAC('Active'))}>Active\n                    </button>\n                </div>\n                {\n                    (state.filter === 'All' && state.tasks.filter(() => true).map(item =>\n                        <TodoItem key={item.id}\n                                  subTodo={item.subTodo}\n                                  isDone={item.isDone}\n                                  date={item.date}\n                                  id={item.id}\n                                  title={item.title}/>).reverse()) ||\n                    (state.filter === 'Completed' && state.tasks.filter(item => item.isDone === true).map(item =>\n                        <TodoItem key={item.id} subTodo={item.subTodo} isDone={item.isDone} date={item.date}\n                                  id={item.id}\n                                  title={item.title}/>).reverse()) ||\n                    (state.filter === 'Active' && state.tasks.filter(item => item.isDone === false).map(item =>\n                        <TodoItem key={item.id} subTodo={item.subTodo} isDone={item.isDone} date={item.date}\n                                  id={item.id}\n                                  title={item.title}/>).reverse())\n\n                }\n            </div>\n        </Context.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}