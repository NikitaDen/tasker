{"version":3,"sources":["assets/images/edit.svg","assets/images/done.svg","assets/images/sun.svg","assets/images/moon.svg","assets/images/pin.svg","assets/images/add.svg","assets/images/delete.svg","assets/images/show.svg","assets/images/hide.svg","context.jsx","components/Button/Button.jsx","components/TodoItem/TodoSubItem/TodoSubItem.jsx","components/TodoItem/TodoItem.jsx","reducer.jsx","components/Header/Header.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Context","React","Button","props","src","className","onClick","onClickFunc","onKeyPress","onKeyPressFunc","alt","TodoSubItem","useState","item","title","subTitle","setSubTitle","disabled","setDisabled","useEffect","toggleDone","isDone","done","type","onChange","dispatch","toggleSubTodoAC","id","subId","style","textDecoration","value","event","target","key","editSubTodoAC","onBlur","autoFocus","placeholder","pin","deleteSubTodoAC","edit","TodoItem","useContext","addSubTodoAC","deleteTodoAC","toggleTodoAC","editTodoAC","show","setShow","editMode","setEditMode","newTitle","setNewTitle","subTodo","length","filter","checked","e","color","date","add","Date","now","hide","see","remove","map","reverse","state","action","tasks","toLocaleString","payload","progress","subItem","filterAC","Header","setDarkMode","darkMode","htmlFor","backgroundImage","sun","moon","App","todos","JSON","parse","localStorage","getItem","useReducer","reducer","todoTitle","setTodoTitle","setItem","stringify","Provider","addTodoAC","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d1dae87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edit.c22620d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/done.6fc8520a.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.7eae5395.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.d87296db.svg\";","module.exports = __webpack_public_path__ + \"static/media/pin.fd6c39aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.b1160944.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.a11d67e2.svg\";","module.exports = __webpack_public_path__ + \"static/media/show.df980639.svg\";","module.exports = __webpack_public_path__ + \"static/media/hide.20fcb843.svg\";","import * as React from \"react\";\r\n\r\nexport const Context = React.createContext();","import React from \"react\";\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        props.src ? <img src={props.src}\r\n                         className={props.className}\r\n                         onClick={props.onClickFunc}\r\n                         onKeyPress={props.onKeyPressFunc ? props.onKeyPressFunc : null}\r\n                         alt={props.alt}/>\r\n            :\r\n            <button className={props.className}\r\n                    onClick={props.onClickFunc}>{props.alt}</button>\r\n    )\r\n};\r\n\r\nexport default Button;","import React, {useEffect, useState} from \"react\";\r\nimport pin from './../../../assets/images/pin.svg';\r\nimport edit from './../../../assets/images/edit.svg';\r\nimport done from './../../../assets/images/done.svg';\r\nimport Button from \"../../Button/Button\";\r\n\r\nconst TodoSubItem = (props) => {\r\n    const [subTitle, setSubTitle] = useState(props.item.title || '');\r\n    const [disabled, setDisabled] = useState(props.item.title && true);\r\n\r\n    useEffect(() => props.toggleDone(true), [props.item.isDone]);\r\n\r\n    const editSubTodo = (event) => {\r\n        if (event.key === 'Enter') {\r\n            props.dispatch(props.editSubTodoAC(props.item.subId, props.id, {title: subTitle}));\r\n            setDisabled(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='todo-subitem'>\r\n            <div className='todo-subitem__check'>\r\n                {props.item.isDone\r\n                    ? <img src={done} className='isDone' alt=\"done\"/>\r\n                    : <span className={'checkSpan'}/>}\r\n                <input className='isDoneCheckbox' type=\"checkbox\"\r\n                       onChange={() => {\r\n                           props.dispatch(props.toggleSubTodoAC(props.id, props.item.subId))\r\n                       }}/>\r\n            </div>\r\n\r\n            {disabled\r\n                ? <div className={'todo-subitem__text'}>\r\n                    <span style={props.item.isDone ? {textDecoration: 'line-through'} : {}}>{props.item.title || 'Press edit'}</span>\r\n                </div>\r\n                : <input type=\"text\"\r\n                         value={subTitle}\r\n                         onChange={event => setSubTitle(event.target.value)}\r\n                         onKeyPress={editSubTodo}\r\n                         onBlur={() => setDisabled(true)}\r\n                         autoFocus={!disabled}\r\n                         placeholder={'Input subtask...'}/>\r\n            }\r\n\r\n            <div className='buttons'>\r\n                <Button src={pin} alt={'remove'} className={'button'}\r\n                        onClickFunc={() => props.dispatch(props.deleteSubTodoAC(props.id, props.item.subId))}/>\r\n                <Button src={edit} alt={'edit'} className={'button'} onClickFunc={() => setDisabled(false)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoSubItem;","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {Context} from \"../../context\";\r\nimport TodoSubItem from \"./TodoSubItem/TodoSubItem\";\r\nimport add from \"../../assets/images/add.svg\";\r\nimport remove from \"../../assets/images/delete.svg\";\r\nimport done from \"../../assets/images/done.svg\";\r\nimport see from \"../../assets/images/show.svg\";\r\nimport hide from \"../../assets/images/hide.svg\";\r\nimport edit from \"../../assets/images/edit.svg\";\r\nimport Button from \"../Button/Button\";\r\n\r\nconst TodoItem = (props) => {\r\n    const {\r\n        dispatch, addSubTodoAC, deleteTodoAC,\r\n        toggleTodoAC, editSubTodoAC, editTodoAC, toggleSubTodoAC, deleteSubTodoAC\r\n    } = useContext(Context);\r\n    const [show, setShow] = useState(true);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [newTitle, setNewTitle] = useState(props.title);\r\n\r\n    useEffect(() => {\r\n        dispatch(editTodoAC(props.id, newTitle))\r\n    }, [newTitle]);\r\n\r\n    const toggleDone = (isDone) => {\r\n        if (props.subTodo.length === props.subTodo.filter(item => item.isDone === true).length) {\r\n            dispatch(toggleTodoAC(props.id, isDone));\r\n        } else {\r\n            dispatch(toggleTodoAC(props.id, !isDone));\r\n        }\r\n    };\r\n\r\n    const changeTitle = (e) => {\r\n        setNewTitle(e.target.value);\r\n        dispatch(editTodoAC(props.id, newTitle))\r\n    };\r\n\r\n    const setNewTitleToTask = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={props.isDone ? 'todo-item todo-item--done' : 'todo-item'}>\r\n                <div className='complete-indicator'/>\r\n\r\n                <div className='todo-item__check'>\r\n                    {props.isDone\r\n                        ? <img src={done} className='isDone isDone--todo' alt=\"done\"/>\r\n                        : <span className={'checkSpan checkSpan--todo'}/>\r\n                    }\r\n                    <input type=\"checkbox\"\r\n                           className={'isDoneCheckbox isDoneCheckbox--todo'}\r\n                           checked={props.isDone}\r\n                           onChange={() => dispatch(toggleTodoAC(props.id, !props.isDone))}/>\r\n                </div>\r\n\r\n                {editMode ? <input type=\"text\" autoFocus={editMode} value={newTitle} onChange={changeTitle} onBlur={() => setEditMode(false)}\r\n                                   onKeyPress={setNewTitleToTask}/> :\r\n                    <span style={newTitle ? null : {color: 'gray'} }>{newTitle ? newTitle : 'Title is Empty'}</span>}\r\n\r\n                <div className='date'>{props.date}</div>\r\n\r\n                <div className='buttons'>\r\n                    <Button src={add} alt={'add'} className={'button'} onClickFunc={() => dispatch(addSubTodoAC(props.id, {title: '', subId: Date.now()}))}/>\r\n                    <Button src={edit} alt={'edit'} className={'button'} onClickFunc={() => {setEditMode(!editMode)}}/>\r\n                    <Button src={show ? hide : see} className={'button'} alt={'hide'} onClickFunc={() => setShow(!show)}/>\r\n                    <Button src={remove} alt={'delete'} className={'button'} onClickFunc={() => dispatch(deleteTodoAC(props.id))}/>\r\n                </div>\r\n            </div>\r\n            {show ? props.subTodo.map(item => <TodoSubItem key={item.subId} {...props} toggleDone={toggleDone}\r\n                                                           dispatch={dispatch}\r\n                                                           toggleSubTodoAC={toggleSubTodoAC}\r\n                                                           deleteSubTodoAC={deleteSubTodoAC}\r\n                                                           editSubTodoAC={editSubTodoAC}\r\n                                                           item={item}/>).reverse() : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoItem;","const ADD = 'ADD';\r\nconst ADD_SUB_TODO = 'ADD_SUB_TODO';\r\nconst DELETE = 'DELETE';\r\nconst TOGGLE_TODO = 'TOGGLE_TODO';\r\nconst EDIT_TODO = 'EDIT_TODO';\r\nconst EDIT_SUB_TODO = 'EDIT_SUB_TODO';\r\nconst TOGGLE_SUB_TODO = 'TOGGLE_SUB_TODO';\r\nconst DELETE_SUB_TODO = 'DELETE_SUB_TODO';\r\nconst FILTER = 'FILTER';\r\n\r\nexport default function (state, action) {\r\n    switch (action.type) {\r\n        case FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.filter,\r\n            };\r\n        case ADD:\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks,\r\n                    {\r\n                        id: Date.now(),\r\n                        date: `${new Date().toLocaleString()}`,\r\n                        title: action.payload,\r\n                        isDone: false,\r\n                        subTodo: [],\r\n                        progress: 0\r\n                    }\r\n                ]\r\n            };\r\n        case EDIT_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks.map(item => {\r\n                        if (item.id === action.id) {\r\n                            return {\r\n                                ...item,\r\n                                title: action.title\r\n                            }\r\n                        }\r\n                        return item\r\n                    })\r\n                ]\r\n            };\r\n        case ADD_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo: [\r\n                                ...item.subTodo,\r\n                                {\r\n                                    ...action.payload,\r\n                                    subId: Date.now(),\r\n                                    isDone: false\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case TOGGLE_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            isDone: action.isDone\r\n                        }\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case TOGGLE_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo:\r\n                                item.subTodo.map(subItem => {\r\n                                    if (subItem.subId === action.subId) {\r\n                                        return {\r\n                                            ...subItem,\r\n                                            isDone: !subItem.isDone\r\n                                        }\r\n                                    }\r\n                                    return subItem;\r\n                                })\r\n                        };\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case EDIT_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo:\r\n                                item.subTodo.map(subItem => {\r\n                                    if (subItem.subId === action.subId) {\r\n                                        return {\r\n                                            ...subItem,\r\n                                            ...action.payload\r\n                                        }\r\n                                    }\r\n                                    return subItem;\r\n                                })\r\n                        };\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        case DELETE:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(item => item.id !== action.id)\r\n            };\r\n        case DELETE_SUB_TODO:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item,\r\n                            subTodo: item.subTodo.filter(subItem => subItem.subId !== action.subId)\r\n                        };\r\n                    }\r\n                    return item;\r\n                })\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const filterAC = (filter) => ({type: FILTER, filter});\r\n\r\nexport const addTodoAC = (todoTitle) => ({type: ADD, payload: todoTitle});\r\nexport const addSubTodoAC = (id, payload) => ({type: ADD_SUB_TODO, id, payload});\r\n\r\nexport const toggleTodoAC = (id, isDone) => ({type: TOGGLE_TODO, id, isDone});\r\nexport const toggleSubTodoAC = (id, subId) => ({type: TOGGLE_SUB_TODO, subId, id});\r\n\r\nexport const editTodoAC = (id, title) => ({type: EDIT_TODO, id, title});\r\nexport const editSubTodoAC = (subId, id, payload) => ({type: EDIT_SUB_TODO, subId, id, payload});\r\n\r\nexport const deleteTodoAC = (id) => ({type: DELETE, id});\r\nexport const deleteSubTodoAC = (id, subId) => ({type: DELETE_SUB_TODO, subId, id});","import React from \"react\";\r\nimport sun from \"../../assets/images/sun.svg\";\r\nimport moon from \"../../assets/images/moon.svg\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header>\r\n            <h3>{props.title}</h3>\r\n            <input onChange={() => props.setDarkMode(!props.darkMode)} id='dark-check' type=\"checkbox\"/>\r\n            <label className='dark-mode' htmlFor=\"dark-check\">\r\n                <div className='toggle'\r\n                     style={props.darkMode ? {backgroundImage: `url(${sun})`} : {backgroundImage: `url(${moon})`}}/>\r\n            </label>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React, {useEffect, useReducer, useState} from 'react';\nimport './assets/styles/styles.scss';\nimport TodoItem from \"./components/TodoItem/TodoItem\";\nimport {Context} from \"./context\";\nimport sun from './assets/images/sun.svg';\nimport moon from './assets/images/moon.svg';\nimport reducer, {\n    addSubTodoAC,\n    addTodoAC,\n    deleteSubTodoAC,\n    deleteTodoAC,\n    editSubTodoAC, editTodoAC, filterAC,\n    toggleSubTodoAC,\n    toggleTodoAC\n} from \"./reducer\";\nimport Button from \"./components/Button/Button\";\nimport Header from \"./components/Header/Header\";\n\nconst App = () => {\n    const todos = JSON.parse(localStorage.getItem('todos')) || {filter: 'All', tasks: []};\n    const [state, dispatch] = useReducer(reducer, todos);\n    const [todoTitle, setTodoTitle] = useState('');\n    const [darkMode, setDarkMode] = useState(true);\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(state))\n    }, [state]);\n\n    const addTodo = (event) => {\n        if (event.key === 'Enter') {\n            dispatch(addTodoAC(todoTitle));\n            setTodoTitle('');\n        }\n    };\n\n    const setFilter = () => {\n        return (state.filter === 'All' && state.tasks.filter(() => true).map(item =>\n            <TodoItem key={item.id}\n                      subTodo={item.subTodo}\n                      isDone={item.isDone}\n                      date={item.date}\n                      id={item.id}\n                      title={item.title}/>).reverse()) ||\n        (state.filter === 'Completed' && state.tasks.filter(item => item.isDone === true).map(item =>\n            <TodoItem key={item.id} subTodo={item.subTodo} isDone={item.isDone} date={item.date}\n                      id={item.id}\n                      title={item.title}/>).reverse()) ||\n        (state.filter === 'Active' && state.tasks.filter(item => item.isDone === false).map(item =>\n            <TodoItem key={item.id} subTodo={item.subTodo} isDone={item.isDone} date={item.date}\n                      id={item.id}\n                      title={item.title}/>).reverse());\n    };\n\n    return (\n        <Context.Provider value={{\n            dispatch,\n            filterAC,\n            addSubTodoAC,\n            deleteTodoAC,\n            toggleTodoAC,\n            editSubTodoAC,\n            editTodoAC,\n            toggleSubTodoAC,\n            deleteSubTodoAC\n        }}>\n\n            <div className={darkMode ? 'wrapper' : 'wrapper wrapper--light'}>\n\n                <div className={'container'}>\n\n                    <Header title={'Tasker'} darkMode={darkMode} setDarkMode={setDarkMode}/>\n\n                    <input className='main-input'\n                           type=\"text\"\n                           placeholder='Input your task...'\n                           value={todoTitle}\n                           onChange={event => setTodoTitle(event.target.value)}\n                           autoFocus={true}\n                           onKeyPress={addTodo}\n                    />\n                    <div>\n                        <Button className={`button button--filter ${state.filter === 'All' && 'active'}`} alt={'All'} onClickFunc={() => dispatch(filterAC('All'))}/>\n                        <Button className={`button button--filter ${state.filter === 'Completed' && 'active'}`} alt={'Completed'} onClickFunc={() => dispatch(filterAC('Completed'))}/>\n                        <Button className={`button button--filter ${state.filter === 'Active' && 'active'}`} alt={'Active'} onClickFunc={() => dispatch(filterAC('Active'))}/>\n                    </div>\n\n                    {\n                        setFilter()\n                    }\n                </div>\n            </div>\n        </Context.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}